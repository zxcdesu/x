generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/@prisma/client-platform"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  Gupshup
  Instagram
  Telegram
  Viber
  Vkontakte
  Web
}

enum ChannelStatus {
  Connecting
  Connected
  Failed
}

model Channel {
  id           Int           @id @default(autoincrement())
  projectId    Int
  type         ChannelType
  name         String
  accountId    String
  token        Json
  status       ChannelStatus
  failedReason String?
  approval     Approval[]
  chats        Chat[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([projectId, id])
  @@index([projectId])
}

model Chat {
  id          Int       @id @default(autoincrement())
  projectId   Int
  channelId   Int
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  contactId   Int
  contact     Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  accountId   String
  isNew       Boolean   @default(true)
  unreadCount Int       @default(0)
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([projectId, id])
  @@unique([channelId, accountId])
  @@index([projectId])
  @@index([channelId])
  @@index([accountId])
}

enum MessageStatus {
  Submitted
  Delivered
  Read
  Failed
}

model Message {
  id           Int           @id @default(autoincrement())
  chatId       Int
  chat         Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  content      Content[]
  author       Author?
  externalId   String
  status       MessageStatus
  failedReason String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([chatId, externalId])
}

enum AuthorType {
  User
  Bot
  Contact
}

model Author {
  messageId   Int     @id
  message     Message @relation(fields: [messageId], references: [id], onDelete: Cascade)
  id          Int?
  type        AuthorType
}

model Content {
  id          Int          @id @default(autoincrement())
  messageId   Int
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  text        String?
  attachments Attachment[]
  buttons     Json         @default("[]")
}

enum AttachmentType {
  Audio
  Document
  Image
  Video
}

model Attachment {
  id        Int            @id @default(autoincrement())
  contentId Int
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  url       String
  type      AttachmentType
  name      String?

  @@index([type])
}

model Hsm {
  id          Int        @id @default(autoincrement())
  projectId   Int
  code        String
  text        String
  attachments Json       @default("[]")
  buttons     Json       @default("[]")
  approval    Approval[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([projectId, id])
  @@unique([projectId, code])
  @@index([projectId])
}

enum ApprovalStatus {
  Submitted
  Approved
  Rejected
}

model Approval {
  hsmId          Int
  hsm            Hsm            @relation(fields: [hsmId], references: [id], onDelete: Cascade)
  channelId      Int
  channel        Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  status         ApprovalStatus
  rejectedReason String?
  externalId     String?

  @@id([channelId, hsmId])
  @@unique([externalId])
}

enum AssigneeType {
  User
  Bot
}

model AssignedTo {
  contactId Int          @id
  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  id        Int
  type      AssigneeType @default(User)

  @@unique([contactId, id])
  @@index([id])
  @@index([type])
}

enum ContactStatus {
  Pending
  Processing
  Resolved
  Rejected
}

model Contact {
  id             Int           @id @default(autoincrement())
  projectId      Int
  name           String        @default("")
  description    String        @default("")
  imageUrl       String?
  assignedTo     AssignedTo?
  priority       Int           @default(3)
  status         ContactStatus
  rejectedReason String?
  chats          Chat[]
  tags           ContactTag[]
  customFields   CustomField[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime?     @updatedAt
  deletedAt      DateTime?

  @@unique([projectId, id])
  @@index([projectId])
  @@index([priority])
  @@index([status])
  @@index([createdAt])
  @@index([updatedAt])
}
model Tag {
  id          Int          @id @default(autoincrement())
  projectId   Int
  name        String
  description String       @default("")
  color       String
  parentId    Int?
  parent      Tag?         @relation("parentAndChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children    Tag[]        @relation("parentAndChildren")
  contacts    ContactTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([projectId, id])
  @@unique([projectId, name])
  @@index([projectId])
}

model ContactTag {
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([tagId, contactId])
  @@index([tagId])
  @@index([contactId])
}

model CustomField {
  id        Int     @id @default(autoincrement())
  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  name      String
  value     String?

  @@index([contactId])
}
