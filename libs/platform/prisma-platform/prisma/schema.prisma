generator client {
  provider      = "prisma-client-js"
  output        = "./generated"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChannelType {
  Gupshup
  Instagram
  Telegram
  Viber
  Vkontakte
  Webapp
}

enum ChannelStatus {
  Connecting
  Active
  Failed
}

model Channel {
  id           Int           @id @default(autoincrement())
  projectId    Int
  type         ChannelType
  name         String
  externalId   String
  token        Json
  status       ChannelStatus @default(Connecting)
  failedReason String?
  approval     Approval[]
  chats        Chat[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([projectId])
}

model Chat {
  id             Int       @id @default(autoincrement())
  channelId      Int
  channel        Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)
  contactId      Int
  contact        Contact   @relation(fields: [contactId], references: [id], onDelete: Cascade)
  externalId     String
  unreadMessages Int       @default(0)
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@unique([channelId, externalId])
  @@index([channelId])
}

enum AuthorType {
  Bot
  Contact
  User
}

model Author {
  messageId Int        @id
  message   Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  id        Int?
  type      AuthorType
}

enum MessageStatus {
  Submitted
  Delivered
  Sent
  Read
  Failed
}

model Message {
  id           Int           @id @default(autoincrement())
  chatId       Int
  chat         Chat          @relation(fields: [chatId], references: [id], onDelete: Cascade)
  externalId   String
  status       MessageStatus
  failedReason String?
  author       Author?
  content      Content[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([chatId, externalId])
}

model Content {
  id          Int          @id @default(autoincrement())
  messageId   Int
  message     Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  text        String?
  attachments Attachment[]
  buttons     Json         @default("[]")
}

enum AttachmentType {
  Audio
  Document
  Image
  Unknown
  Video
}

model Attachment {
  id        Int            @id @default(autoincrement())
  contentId Int
  content   Content        @relation(fields: [contentId], references: [id], onDelete: Cascade)
  name      String?
  url       String
  type      AttachmentType

  @@index([type])
}

enum AssigneeType {
  Bot
  User
}

model AssignedTo {
  contactId Int          @id
  contact   Contact      @relation(fields: [contactId], references: [id], onDelete: Cascade)
  id        Int
  type      AssigneeType @default(User)
}

enum ContactStatus {
  Queued
  Closed
}

model Contact {
  id           Int            @id @default(autoincrement())
  projectId    Int
  name         String         @default("")
  description  String         @default("")
  imageUrl     String?
  priority     Int            @default(3)
  status       ContactStatus  @default(Queued)
  closedReason String?
  assignedTo   AssignedTo?
  chats        Chat[]
  fields       ContactField[]
  tags         ContactTag[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?

  @@index([projectId])
}

model ContactTag {
  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tagId     Int
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([tagId, contactId])
}

model Tag {
  id          Int          @id @default(autoincrement())
  projectId   Int
  name        String
  description String       @default("")
  color       String
  parentId    Int?
  parent      Tag?         @relation("parentAndChildren", fields: [parentId], references: [id], onDelete: SetNull)
  children    Tag[]        @relation("parentAndChildren")
  contacts    ContactTag[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model ContactField {
  contactId Int
  contact   Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)
  fieldId   Int
  field     Field   @relation(fields: [fieldId], references: [id], onDelete: Cascade)
  value     String?

  @@id([contactId, fieldId])
}

model Field {
  id          Int            @id @default(autoincrement())
  projectId   Int
  name        String
  description String         @default("")
  value       String?
  contacts    ContactField[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

model Hsm {
  id          Int        @id @default(autoincrement())
  projectId   Int
  name        String
  text        String
  attachments Json       @default("[]")
  buttons     Json       @default("[]")
  approval    Approval[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([projectId, name])
  @@index([projectId])
}

enum ApprovalStatus {
  Submitted
  Approved
  Rejected
}

model Approval {
  channelId      Int
  channel        Channel        @relation(fields: [channelId], references: [id], onDelete: Cascade)
  hsmId          Int
  hsm            Hsm            @relation(fields: [hsmId], references: [id], onDelete: Cascade)
  externalId     String?
  status         ApprovalStatus
  rejectedReason String?

  @@id([channelId, hsmId])
  @@unique([externalId])
}